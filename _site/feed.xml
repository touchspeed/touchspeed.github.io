<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2024-07-11T17:35:25+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Meve’s blog</title><subtitle>Hello  World</subtitle><author><name>Meve</name></author><entry><title type="html">rpm update wps</title><link href="http://localhost:4000/rpm-update-wps/" rel="alternate" type="text/html" title="rpm update wps" /><published>2024-07-11T16:50:00+07:00</published><updated>2024-07-11T16:50:00+07:00</updated><id>http://localhost:4000/rpm-update-wps</id><content type="html" xml:base="http://localhost:4000/rpm-update-wps/"><![CDATA[<h2 id="前言">前言</h2>

<p>今天使用rocky时，发现wps有更新，每次打开都提示，那就更新一下吧。</p>

<p><strong><em>BTW：wps for linux会一直保持干净免费吗…</em></strong></p>

<h2 id="开始">开始</h2>

<p>去 <a href="https://linux.wps.cn/">wps for linux官网</a> 下载一下rpm包，准备安装。</p>

<p><img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-11-rpm-update-wps/image-2.png" alt="alt text" /></p>

<p>使用rpm -ivh安装，提示冲突
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-11-rpm-update-wps/image.png" alt="alt text" /></p>

<p>使用rpm -Uvh，成功
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-11-rpm-update-wps/image-1.png" alt="alt text" /></p>

<h2 id="总结">总结</h2>

<p>初次安装，使用rpm -ivh</p>

<p>更新应用，使用rpm -Uvh</p>]]></content><author><name>Meve</name></author><category term="Linux" /><category term="Linux" /><category term="Tips" /><summary type="html"><![CDATA[前言]]></summary></entry><entry><title type="html">Conv Basic</title><link href="http://localhost:4000/conv-basic/" rel="alternate" type="text/html" title="Conv Basic" /><published>2024-07-11T15:47:00+07:00</published><updated>2024-07-11T15:47:00+07:00</updated><id>http://localhost:4000/conv-basic</id><content type="html" xml:base="http://localhost:4000/conv-basic/"><![CDATA[<p>等待总结</p>

<p>浅显易懂的说明<br />
<a href="https://zhuanlan.zhihu.com/p/694356231">卷积运算扫盲学习-硬件基础</a></p>

<p><a href="https://animatedai.github.io/">animatedai</a></p>]]></content><author><name>Meve</name></author><summary type="html"><![CDATA[等待总结]]></summary></entry><entry><title type="html">unrar on rocky linux</title><link href="http://localhost:4000/linux-rar/" rel="alternate" type="text/html" title="unrar on rocky linux" /><published>2024-07-06T15:28:00+07:00</published><updated>2024-07-06T15:28:00+07:00</updated><id>http://localhost:4000/linux-rar</id><content type="html" xml:base="http://localhost:4000/linux-rar/"><![CDATA[<h2 id="前言">前言</h2>

<p>有一些rar文件需要解压，由于不需要rar压缩功能，所以我选择安装免费版。<br />
在 Linux 上使用的 unrar 工具有两种版本：一个是免费版本，另一个是商业版本。免费版本有一些限制，主要是它只能解压 RAR 文件，而不能创建 RAR 文件。</p>

<h2 id="免费版本-unrar">免费版本 (unrar)</h2>

<p>免费版本的 unrar 是开源的，可以用于解压 RAR 文件。这个版本可以通过大多数 Linux 发行版的包管理器安装。
安装免费版本 unrar</p>

<ol>
  <li>
    <p>启用 EPEL 仓库</p>

    <p>首先，确保 EPEL 仓库已启用。打开终端并运行以下命令：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> sudo dnf install epel-release
</code></pre></div>    </div>
  </li>
  <li>
    <p>安装 unrar</p>

    <p>然后，安装 unrar 包：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> sudo dnf install unrar
</code></pre></div>    </div>
  </li>
  <li>
    <p>解压 RAR 文件</p>

    <p>安装完成后，就可以使用 unrar 解压 RAR 文件。例如，假设有一个名为 example.rar 的文件：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> unrar x example.rar
</code></pre></div>    </div>

    <p>x 选项用于提取文件并保持目录结构。</p>
  </li>
</ol>

<h2 id="商业版本-rar">商业版本 (rar)</h2>

<p>商业版本的 rar 工具可以用于创建和解压 RAR 文件。这个版本不是免费的，需要购买许可证才能合法使用。
如果只需要安装</p>

<ol>
  <li>访问 <a href="https://www.rarlab.com/download.htm">WinRAR 官方网站</a> 下载适用于 Linux 的 rar 工具。</li>
  <li>下载后解压文件并安装。</li>
</ol>

<p>例如，假设下载的文件名为 rarlinux-x64-701.tar.gz：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tar -xvf rarlinux-x64-701.tar.gz
cd rar
sudo cp rar unrar /usr/local/bin/
</code></pre></div></div>

<p>使用示例
使用 unrar 解压文件</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unrar x example.rar
</code></pre></div></div>

<p>使用 rar 创建文件</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rar a example.rar file1 file2
</code></pre></div></div>

<h2 id="总结">总结</h2>

<p>如果只需要解压 RAR 文件，可以使用免费的 unrar 工具。<br />
如果需要创建 RAR 文件，需要购买并安装商业版本的 rar 工具。</p>]]></content><author><name>Meve</name></author><category term="Linux" /><category term="Linux" /><summary type="html"><![CDATA[前言]]></summary></entry><entry><title type="html">部分工作内容展示</title><link href="http://localhost:4000/work-prjs/" rel="alternate" type="text/html" title="部分工作内容展示" /><published>2024-07-03T14:00:00+07:00</published><updated>2024-07-03T14:00:00+07:00</updated><id>http://localhost:4000/work-prjs</id><content type="html" xml:base="http://localhost:4000/work-prjs/"><![CDATA[<h2 id="部分工作内容展示">部分工作内容展示</h2>

<p>一些工作内容或不便展示，这里只作部分展示<br /></p>

<h2 id="-dsc-ip-simulation--integration-">● DSC IP Simulation &amp; Integration <br /></h2>

<p>dsc enc dec structure<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/1.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/2.png" alt="alt text" /><br /></p>

<p>由于wholechip基于smic .11工艺，需要使用smic .11 memory compiler产生memory替换ip环境自带的tsmc memory<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/3.png" alt="alt text" /><br /></p>

<p>由于ip自带的部分ram depth跑不满，自己产生ram时可以产生小一点的替换，这就可以节省一点面积。而部分自带的ram虽然需要的depth比较小，但我们的mc工具限制了minimum depth，所以即使有部分浪费也只能使用。<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/4.png" alt="alt text" /><br /></p>

<p>单口ram和双口ram选用也要分情况，像ip自带的128x128的这种ram，smic .11 mc能产生的maximum bits为64(两个ram一组即可)，而对于depth，虽然mc可以产生128x64的双口ram，但最终面积比256x64的单口ram面积还大，所以最后选用256x64的单口ram以节省面积。<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/5.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/6.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/7.png" alt="alt text" /><br /></p>

<h2 id="-2d-scaler">● 2D Scaler<br /></h2>
<p>Example of 2D Scaler for 1920x1080 scale down to 1900x800<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/8.png" alt="alt text" /><br />
scale down structure<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/9.png" alt="alt text" /><br />
scale up structure<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/10.png" alt="alt text" /><br /></p>

<h2 id="-tcon-project-mpw-tapeout">● TCON Project (MPW Tapeout)<br /></h2>

<p>tcon to panel using gowin fpga<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/11.png" alt="alt text" /><br />
tcon structre<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/12.png" alt="alt text" /><br />
lvds rx structure<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/13.png" alt="alt text" /><br />
mini-lvds tx structure<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/14.png" alt="alt text" /><br /></p>

<h2 id="-bt656-decoder">● BT656 Decoder<br /></h2>

<p><img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/15.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-04-work-prjs/16.png" alt="alt text" /><br /></p>]]></content><author><name>Meve</name></author><category term="JOB" /><category term="JOB" /><summary type="html"><![CDATA[部分工作内容展示]]></summary></entry><entry><title type="html">Xilinx FPGA ddr3 MIG 控制器</title><link href="http://localhost:4000/ddr3-mig/" rel="alternate" type="text/html" title="Xilinx FPGA ddr3 MIG 控制器" /><published>2024-07-02T15:03:00+07:00</published><updated>2024-07-02T15:03:00+07:00</updated><id>http://localhost:4000/ddr3-mig</id><content type="html" xml:base="http://localhost:4000/ddr3-mig/"><![CDATA[<h2 id="fpga-ddr3控制器">FPGA DDR3控制器</h2>

<h2 id="前言">前言</h2>

<p>由于DDR3速度高、吞吐量大、双边沿、命令复杂、从命令到数据延时时间长以及刷新、预充电等诸多内容，因此DDR3使用比较复杂。
鉴于此，在当前的FPGA与DDR3的应用中将DDR3物理层读写（DDR3控制器）与应用层分开，使得物理层控制器有专门的人或单位（如Xilinx，Intel等）维护，用户只关心应用层与控制器之间的读写，而不需要直接与底层的DDR3信号打交道，这样就简化了用户使用DDR3的难度，如图
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image.png" alt="alt text" /></p>

<p>从上图，可以看出FPGA DDR CONTROLLER起到隔离APP与DDR3接口的作用，同时又是FPGA APP与DDR3沟通的桥梁。从APP的角度看，APP 利用 Control、Address、data等总线所访问的就是DDR3本身，而并不知道DDR控制器的存在，所以DDR控制器起到了翻译、解释和桥梁的作用，如图所示
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-1.png" alt="alt text" /></p>

<p>首先建立一个空的工程</p>

<p><img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-2.png" alt="alt text" /></p>

<p>打开IP catalog 窗口 ，双击IP Catalog
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-3.png" alt="alt text" /></p>

<p>选择DDR控制器IPcore
在IP Catalog 对话框中找到 Memories&amp; Storage Elements–&gt;Memory Interface Generator–&gt;Memory Interface Generator(MIG 7 Series)
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-4.png" alt="alt text" /></p>

<p>点击 Next，在新界面中对MIG（Memory Interface Generator)及项目中使用的器件（FPGA），软件工具，开发语言（Verilog）进行了描述，如图所示。
点击Next
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-5.png" alt="alt text" /></p>

<p>MIG（Memory Interface Generator) 新界面如图
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-6.png" alt="alt text" /></p>

<p>选项意思如下：</p>

<p>MIG Output Option</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Create Design
    该选项包含生成RTL，XDC， implementation 及simulation文件，可以用来仿真测试，也可以作为整个工程的一个部件。其中XDC仅仅针对DDR控制器的约束文件。

Verify Pin Changes and Update Design
    该选项针对以前已经生成的DDR控制器，由于管脚的更改等因素需要重新验证。该选项也会重新生成新的DDR控制器。
</code></pre></div></div>

<hr />

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Component Name 
    DDR控制器组件的名称，将mig_7 series_0修改成DDR3_INTF，将在工程目录内创建DDR_INT的子目录，并在该目录下生成”example_design”,”user_design”与”docs”等目录及文件。

    user_design文件包含了生成的DDR控制器的接口。该接口包含两个部分，（1）与DDR3 芯片的接口（2）控制器与APP的接口。如图所示。
    example_design 除了包含接口外还添加了一个简单的应用案例，可用来学习或模仿如何使用新生成的控制器。
    docs 包含了控制器的说明文档。
</code></pre></div></div>

<hr />

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Multi-Controller
    可以选择一个也可以选择多个（最多可以8个），根据硬件电路决定。这里选择一个。
</code></pre></div></div>

<hr />

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AXI4 Interface
    AXI接口,如果熟悉AXI接口或与该控制器对接的部件使用AXI接口，则选择AXI接口。如果不选AXI则使用传统的控制接口。这里测试就不采用AXI接口。
</code></pre></div></div>

<p>下一步</p>

<p>管脚兼容性FPGA器件选择</p>

<p>DDR控制器生成器向导可以根据工程选择的器件推断出在同样封装的器件家族中还有哪些器件可以与工程中使用的器件管脚兼容，如果选择兼容的器件，将来该控制器可在其它兼容器件上使用，如图所示。点击Next.</p>

<p><img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-7.png" alt="alt text" /></p>

<p>下一步</p>

<p>DDR 器件选择
如图，xc7a100tfgg676-2器件支持DDR3，DDR2以及LPDDR2。本例选择DDR3 SDRAM。
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-8.png" alt="alt text" /></p>

<p>DDR3L 与LPDDR3器件虽然不能被ARTIX系列器件支持，但其它7系列器件可以支持，如Kintex 系列FPGA器件。
DDR3L :低电压系列，接口电压1.35V。
LPDDR3:是一种用在移动设备上的功耗更低，体积更小的器件，电压1.2V。</p>

<p>下一步</p>

<p><img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-9.png" alt="alt text" /></p>

<p>Clock Period
输入时钟周改为2500PS（400MHz），对于ARTIX系列最高可以为400HZ，但是向下兼容。</p>

<p>控制器与PHY（物理层）的时钟比例4：1，是指FPGA提供给DDR3的时钟频率与控制器时钟频率的比率。这个比率只能选择4：1或2：1。这个选择对于控制器与APP接口数据宽度有很大的关系。</p>

<p>VCCAUX的电压设为1.8V，对于Kintex系列，如果FPGA使用HP BANK（如BANK32，BANK33等），VCCAUX设为2.0V 可以提高控制器的读写性能，如可以设置CK时钟为800M或更高。</p>

<p>Memory的类型选择DDR3芯片（ Components）或内存条RDIMMS，LRDIMMS，UDIMMS，SODIMMS等。这里选择芯片（component）。并在下拉框中选择合适的器件，如果找不到对应的器件，则需要创建一个新器件。</p>

<p>DDR3电压1.5V，如果使用DDR2应为1.8V。</p>

<p>ECC （disable），只有72数据口线宽度才支持ECC，其中数据64位，ECC为8位。</p>

<p>Data Mask, 是否产生DDR3 DM 控制脚。如果不用DM，可以节省FPGA的管脚。</p>

<p>BANK Mechine数量， 选择 -4或选择-8等，选择范围2–8。数量越大，耗费FPGA资源越多，但效率越高。主要的原因是在连续读写时，在对一个DDR3 bank读写时可以同时打开其它的DDR3 bank，可以节省由于BANK切换时的预充电 (Precharge) 及激活 (Activating) 时间。</p>

<p>ORDERING 命令执行顺序 有Normal和Strict 两种。Strick严格按照给定的顺序执行。Normal模式下，DDR控制器可以重新调整执行顺序以达到更高的读写效率。</p>

<p><img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-10.png" alt="alt text" />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-11.png" alt="alt text" /></p>

<p><img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-12.png" alt="alt text" /></p>

<p>DDR控制器其它参数设置</p>

<p>输入频率，设置合适的输入频率，这里使用100MHz.</p>

<p>突发类型（Burst Type）:选择Sequential</p>

<p>输出强度（ODI）:可以选择RZQ/6 （40欧姆）或RZQ/7（34欧姆）。</p>

<p>片选（CS#）: 在多个RANK时使用CS#，选择Enable。单个RANK时可以选择Disable,可以节省FPGA管脚。</p>

<p>RTT（ODT）,选择RZQ/4（60欧姆）或RZQ/6（40欧姆）。</p>

<p>地址映射顺序，选择ROW+BANK+COLLUM</p>

<p><img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-13.png" alt="alt text" /></p>

<p>点击Next</p>

<p><img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-14.png" alt="alt text" /></p>

<p>如图设置如下：</p>

<p>System Clock: DDR 控制器输入时钟设置，可以外接到FPGA管脚的输入时钟，此时可以选择差分（Differential ）, 单端（Single End）。如果选择FPGA内部PLL的输出作为DDR控制器的输入管脚，此时应该选择No Buffer，因为PLL的输出已经有全局时钟驱动。</p>

<p>参考时钟（Reference Clock），该时钟主要用来调整与DDR相连的FPGA管脚的输入模块延时的矫正，一般为200MHz，细节可以参考FPGA输入延时相关的文章。由于参考时钟也是 来自FPGA内部PLL，因此选择No Buffer。</p>

<p>复位脚极性，根据DDR3资料，DDR3的复位脚低电平有效，因此选择Active Low。</p>

<p>调试选项，这里选择OFF。</p>

<p>内部参考电压（Internal Ref），这个选项是指FPGA对应BANK参考电压选项，可以使用内部的参考电压生成器，也可以使用外部参考电压。当DDR时钟超过400MHz，一定要选择外部提供的参考时钟，以降低参考时钟的噪声。本例恰好400Mhz，因此选择内部参考时钟。</p>

<p>O功耗降低，选择该项为“ON”可以IO的功耗。就是在非读期间关闭DQ/DQS的输入Buffer，以及FPGA端的终端匹配电阻（RTT）。</p>

<p>XADC, FPGA 内部的ADC，可以使能或非使能。</p>

<p>下一步Next</p>

<p><img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-15.png" alt="alt text" /></p>

<p>下一步Next</p>

<p>对照硬件连接分配引脚，出现错误</p>

<p>ERROR : Address ports can be allocated to non memory byte group pins (not in T0, T1, T2, or T3) if and only if its adjacent byte is non Data byte group (i.e either Address/Control or empty) and it should contain at least one unallocated pin or allocated with memory clock pair. Refer to UG586 and AR# 45588 for more information.</p>

<p><img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-16.png" alt="alt text" /></p>

<p>不确定是不是此开发板DDR3的设计错误</p>

<p><img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-17.png" alt="alt text" /></p>

<p>先采用新设计创建IP，再将IO Ports改为硬件对应连接，Implementation出现Implementation Complete，Failed Nets!</p>

<p><img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-07-02-ddr3-mig/image-18.png" alt="alt text" /></p>

<p>暂时还没能解决 [07_11_2024]</p>]]></content><author><name>Meve</name></author><category term="FPGA" /><category term="IP" /><category term="FPGA" /><summary type="html"><![CDATA[FPGA DDR3控制器]]></summary></entry><entry><title type="html">flameshot，平替snipaste</title><link href="http://localhost:4000/flame-shot/" rel="alternate" type="text/html" title="flameshot，平替snipaste" /><published>2024-06-28T19:20:00+07:00</published><updated>2024-06-28T19:20:00+07:00</updated><id>http://localhost:4000/flame-shot</id><content type="html" xml:base="http://localhost:4000/flame-shot/"><![CDATA[<h3 id="前言">前言</h3>

<p>snipaste是我在win上经常用到的一个截图软件，操作方便，贴图功能也很便利。 <br />
由于现在我更多使用linux，便想寻找一个替代品，而flameshot，则是目前我认为linux上最好用的截图软件。 <br />
机器系统为Rocky Linux 8.10。 <br /></p>

<h3 id="获取">获取</h3>

<p>从<a href="https://github.com/flameshot-org/flameshot/releases/tag/v12.1.0">这里</a>下载，最新版本停留在12.1.0，这里我选择下载appimage，可执行单文件，当然也可以下载rpm包之后安装到系统(sudo rpm -ivh xxxx.rpm)。 <br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-06-27-flame-shot/get_flameshot/flameshot_release.png" alt="flameshot_release" /></p>

<h3 id="统一管理便携应用">统一管理便携应用</h3>

<p>将appimage移动到/home/tools/Utilities/ <br />
mv ./Flameshot-12.1.0.x86_64.AppImage /home/tools/Utilities/ <br /></p>

<p>进入/home/tools/Utilities/文件夹，chmod +x Flameshot-12.1.0.x86_64.AppImage给一下执行权限 <br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-06-27-flame-shot/get_flameshot/utilities.png" alt="utilities" /></p>

<p>/home/tools/里面都是我存放的一些应用 <br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-06-27-flame-shot/get_flameshot/home_tools.png" alt="/home/tools/" /></p>

<p>进入/home/tools/bin/ <br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-06-27-flame-shot/get_flameshot/soft_links.png" alt="soft_links" /></p>

<p>将应用的可执行文件软链接到/home/tools/bin/ <br />
ln -snf ../Utilities/Flameshot-12.1.0.x86_64.AppImage ./flameshot <br /></p>

<p>在.bashrc中将可执行文件目录导入PATH <br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-06-27-flame-shot/get_flameshot/tool_path.png" alt="tool_path" /></p>

<p>打开一个新的终端，输入flameshot即可打开软件。<br /></p>

<h3 id="优点">优点</h3>

<p>无需安装，开箱即用，也方便了系统迁移，只要将tools文件夹复制到新机器的/home/下，再在.bashrc中将可执行文件目录导入PATH，就能使用这些软件，当然appimage在不同系统可能还是会遇到某些依赖问题。 <br /></p>

<h3 id="配置快捷键">配置快捷键</h3>

<p>在使用软件的时候，我准备将ctrl+alt+s作为截屏键，flameshot gui是截图命令 <br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-06-27-flame-shot/get_flameshot/shortcut.png" alt="alt text" /></p>

<p>结果发现left alt和left super是反着的，这不能忍(虽然可以调换键帽hh)，我们直接打开gnome tweaks，没有的话可以sudo yum install gnome-tweaks，然后如下图设置可以将按键换回来。 <br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-06-27-flame-shot/get_flameshot/gnome_tweaks.png" alt="gnome_tweaks" /></p>

<h2 id="结束">结束</h2>]]></content><author><name>Meve</name></author><category term="Linux" /><category term="Linux" /><category term="APP" /><summary type="html"><![CDATA[前言]]></summary></entry><entry><title type="html">IC EDA on Windows using WSL</title><link href="http://localhost:4000/ic-eda-on-windows-using-wsl/" rel="alternate" type="text/html" title="IC EDA on Windows using WSL" /><published>2024-05-07T16:00:00+07:00</published><updated>2024-05-07T16:00:00+07:00</updated><id>http://localhost:4000/ic-eda-on-windows-using-wsl</id><content type="html" xml:base="http://localhost:4000/ic-eda-on-windows-using-wsl/"><![CDATA[<h2 id="前言">前言</h2>

<p>本文记录在wsl上使用eda遇到的一些问题，这是我的wsl版本信息:<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/wsl.png" alt="alt text" /><br />
基于ubuntu20.04 wsl，安装的synopsys eda大部分版本都是2018。<br />
如果是ubuntu22.04会遇到一些棘手的问题，难以解决。</p>

<h2 id="痛点">痛点</h2>

<p>最最最难受的一点，wsl每次电脑重启mac会变化，导致synopsys、matlab之类的license失效。<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/lm1.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/lm2.png" alt="alt text" /><br />
下面给出解决方法：<br />
在Windows中的C:\Users\ [your_username]目录下创建一个.wslconfig文件，然后在文件中写入如下内容</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="err">experimental</span><span class="p">]</span><span class="w">
</span><span class="err">autoMemoryReclaim=gradual</span><span class="w">
</span><span class="err">networkingMode=mirrored</span><span class="w">
</span><span class="err">dnsTunneling=</span><span class="kc">true</span><span class="w">
</span><span class="err">firewall=</span><span class="kc">true</span><span class="w">
</span><span class="err">autoProxy=</span><span class="kc">true</span><span class="w">
</span></code></pre></div></div>
<p>mirror模式下可以发现ifconfig的mac就是真实mac。<br />
<a href="https://unix.stackexchange.com/questions/772303/machine-mac-address-with-ubuntu-on-top-of-wsl2">参考1</a><br />
<a href="https://github.com/microsoft/WSL/issues/5352">参考2</a><br />
<a href="https://github.com/microsoft/WSL/issues/5291">参考3</a><br />
<a href="https://github.com/microsoft/WSL/issues/10753">参考4</a><br />
本来是为了解决wsl不走代理的问题，结果发现这样可以固定eda license mac。<br /></p>

<h2 id="开始">开始</h2>

<p>使用synopsys installer，setup.sh，缺少libXss.so.1，如图:<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/2.png" alt="alt text" /><br />
<a href="https://www.cnblogs.com/taitai139/p/14046962.html">参考此文章</a>，安装libXss1:<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/3.png" alt="alt text" /><br /></p>

<p>lmgrd提示no such file，sudo apt-get install lsb-core即可解决<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/4.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/lsb.png" alt="alt text" /><br />
无法创建.flexlm问题:<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/5.png" alt="alt text" /><br />
解决:<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/6.png" alt="alt text" /><br /></p>

<p>再次lmgrd激活提示端口占用，lmgrd failed to open the tcp port，ps找出进程编号kill掉，再等一段时间就可以再次激活license：<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/7.png" alt="alt text" /><br /></p>

<p>dvt正常:<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/dvt.png" alt="alt text" /><br /></p>

<p>euclide权限问题，提示不能写权限运行，或run with ‘private_install’，这是目录权限问题导致:<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/euclide1.png" alt="alt text" /><br />
改下目录权限即可，用户组改为root，sudo chown root xxxx，如图:<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/euclide2.png" alt="alt text" /><br />
euclide cannot open display问题<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/euclide3.png" alt="alt text" /><br />
进入euclide的eclipse文件夹，sudo vim euclide<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/euclide4.png" alt="alt text" /><br />
如图注释掉<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/euclide5.png" alt="alt text" /><br />
可以运行:<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/euclide6.png" alt="alt text" /><br />
新的问题，暂时无法解决<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/euclide7.png" alt="alt text" /><br /></p>

<p>verdi提示syntax error<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/verdi1.png" alt="alt text" /><br />
sudo dpkg-reconfigure dash，选择no，遇到新的问题<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/verdi2.png" alt="alt text" /><br />
尝试安装libXmu6找不到<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/verdi3.png" alt="alt text" /><br />
search一下，发现了吗，so库是libXmu6，需要安装的是libxmu6，这…<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/verdi4.png" alt="alt text" /><br />
新的依赖<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/verdi5.png" alt="alt text" /><br /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>add-apt-repository ppa:linuxuprising/libpng12
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>libpng12-0
</code></pre></div></div>

<p>nlint，如图安装依赖<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/nlint.png" alt="alt text" /><br />
nlint -gui，如图安装依赖<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/nlint1.png" alt="alt text" /><br />
成功<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/nlint2.png" alt="alt text" /><br /></p>

<p>spyglass正常<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/sg.png" alt="alt text" /><br /></p>

<p>formality，安装csh<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/fm.png" alt="alt text" /><br />
新的问题，如图安装依赖libgl1<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/fm1.png" alt="alt text" /><br />
成功<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/fm2.png" alt="alt text" /><br />
一个警告<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/fm3.png" alt="alt text" /><br />
在~/.bashrc中添加，这个还能解决formality、dc交互shell中的上下键乱码<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/fm4.png" alt="alt text" /><br /></p>

<p>tmax tetramax<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/tmax.png" alt="alt text" /><br />
解决方法<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/tmax1.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/tmax2.png" alt="alt text" /><br />
建立链接<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/tmax3.png" alt="alt text" /><br />
安装libmng2<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/tmax4.png" alt="alt text" /><br />
建立链接<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/tmax5.png" alt="alt text" /><br />
成功<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/tmax6.png" alt="alt text" /><br /></p>

<p>lc_shell lib compiler，安装libpulse0<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/lc.png" alt="alt text" /><br /></p>

<p>icc_shell ic compiler，遇到glibc问题<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/icc.png" alt="alt text" /><br />
网上的解决方法，我没有尝试，从ubuntu22.04退回20.04没有此问题<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/icc1.png" alt="alt text" /><br /></p>

<p>tessent -shell<br /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>libgtk2.0-0
<span class="nb">sudo </span>apt <span class="nb">install </span>libpangoxft-1.0-0
</code></pre></div></div>

<p>calibre -gui，invalid operating system<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/calibre.png" alt="alt text" /><br />
/etc/redhat-release存有以下系统版本内容就不会再报<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/calibre1.png" alt="alt text" /><br />
新建文件填入上面的内容，并设置权限<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/calibre2.png" alt="alt text" /><br /></p>

<p>Virtuoso，过程比较乱，没有整理<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-1.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-2.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-3.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-4.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-5.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-6.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-7.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-8.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-9.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-10.png" alt="alt text" /><br />
集成calibre，需要~/.cdsinit<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-11.png" alt="alt text" /><br />
新建tmp文件夹<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-12.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-13.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-14.png" alt="alt text" /><br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-15.png" alt="alt text" /><br />
安装字体<br />
<img src="https://raw.githubusercontent.com/touchspeed/touchspeed.github.io/main/_posts/2024-05-07-ic-eda-on-windows-using-wsl/image-16.png" alt="alt text" /><br /></p>

<h2 id="最后">最后</h2>
<p>折腾了很久，最后还是用回Linux实机，顺便把我用了几年的kubuntu本子换成了Rocky Linux，虽然ubuntu系列在娱乐方面有优势，但是最近我遇到了一个关于vivado的bug，让我直接选择奔向rhel系。<br />
环境迁移倒是很简单，备份一下home，再把需要的文件解压到新系统就可以，EDA不需要安装可以直接运行遇到依赖问题修复下就可以，repoquery –nvr –whatprovides真的很方便。<br />
而nvidia驱动方面，就没有ubuntu那么方便，折腾半天才把驱动跑起来:D</p>]]></content><author><name>Meve</name></author><category term="Linux" /><category term="EDA" /><category term="Linux" /><category term="WSL" /><summary type="html"><![CDATA[前言]]></summary></entry></feed>